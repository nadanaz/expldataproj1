as.Date(data$Date[1])
strptime(data$Date[1], "%d/%m/%Y")
strptime(data$Date[1], "%d/%m/%Y", tz = "")
typeof(strptime(data$Date[1], "%d/%m/%Y", tz = ""))
strptime(data$Date[1], "%d/%m/%Y", tz = "")
head(data)
data$Date = strptime(data$Date, "%d/%m/%Y")
head(data$Date)
data$Time = strptime(data$Time, "%T")
head(data$Time)
crit = data$Date == strptime("01/02/2007", %D)
crit = data["Date"] == strptime("01/02/2007", %D)
strptime("01/02/2007", %D)
strptime("01/02/2007", "%D")
strptime("01/02/07", "%D")
strptime("02/01/07", "%D")
strptime("2007-02-01", "%F")
crit = data["Date"] == strptime("2007-02-01", "%F")
data = read.csv("household_power_consumption.txt", sep = ";", header=TRUE)
head(data$Date)
data[1]
data$Date[1]
data$Date[1] == 16/12/2006
data$Date[1] == "16/12/2006"
crit = data$Date == "01/02/2007" || data$Date == "02/02/2007"
crit = data$Date == "01/02/2007" | data$Date == "02/02/2007"
subset = data[crit]
rm(subset)
s = subset(data, data$Date == "01/02/2007" | data$Date == "02/02/2007")
s = subset(data, Date == "01/02/2007" | Date == "02/02/2007")
?subset
rm(crit)
s = subset(data, Date == "1/2/2007" | Date == "2/2/2007")
head(s)
a = s
a$Date
a$Date[0]
a$Date[1]
?strptime
a$Date = strptime(a$Date, "%d/%m/%Y")
a$Date[1]
a$Time[1]
a = s
head(a)
hist(a$Global_active_power, col = "red")
?hist
hist(a$Global_active_power, col = "red", freq=TRUE)
a$Global_active_power = as.numeric(a$Global_active_power)
hist(a$Global_active_power, col = "red", freq=TRUE)
hist(a$Global_active_power, col = "red")
hist(a$Global_active_power, col = "red", freq=TRUE)
?hist
hist(a$Global_active_power, col = "red", freq=TRUE)
hist(a$Global_active_power, col = "red", breaks = 50)
hist(a$Global_active_power, col = "red", breaks = 20)
hist(a$Global_active_power, col = "red", breaks = 10)
hist(a$Global_active_power, col = "red", breaks = 15)
hist(a$Global_active_power, col = "red", breaks = 12)
hist(a$Global_active_power, col = "red", breaks = 11)
hist(a$Global_active_power, col = "red", breaks = 12)
hist(a$Global_active_power, col = "red", breaks = 13)
head(a$Global_active_power)
head(s$Global_active_power)
a = s
as.numeric(a$Global_active_power[1])
a$Global_active_power[1]
as.double(a$Global_active_power[1])
typeof(a$Global_active_power)
typeof(s$Global_active_power)
a$Global_active_power[1]
a$Global_active_power[1] == "0.326"
as.string(a$Global_active_power[1])
data = read.csv("household_power_consumption.txt", sep = ";", header=TRUE, colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
data = read.csv("household_power_consumption.txt", sep = ";", header=TRUE, colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
data = read.csv("household_power_consumption.txt", sep = ";", header=TRUE, colClasses = c("character", "character", "character", "character", "character", "character", "character", "character", "character"))
head(data)
s = subset(data, Date == "1/2/2007" | Date == "2/2/2007")
a = s
a$Global_active_power[1]
typeof(a$Global_active_power[1])
as.numeric(a$Global_active_power[1])
hist(as.numeric(a$Global_active_power), col = "red")
a$DateTime
a$Date
quit
quit()
set.seed(12345)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X[,1]
X[. "var1"]
X[, "var1"]
X["var1"]
X[1:2,"var2"]
typeof(X["var1"])
typeof(X[, "var1"])
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 11),]
X[c(1,3,4),]
X[which(X$var2 > 8)]
X[which(X$var2 > 8),]
X
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var1, na.last = TRUE)
X[order(X$var1),]
X[order(X$var1, X$var3),]
library(plyr)
arrange(X, var1)
arrange(X, desc(var1())
arrange(X, desc(var1())
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X, rnorm(5))
Y
Y <- cbind(rnorm(5), X)
Y
fileUrl <- "https://data.batimorecity.gov/api/views/k5ry-ef3g/row.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="restaurant.csv", method="wget")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/row.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="restaurant.csv", method="wget")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="restaurant.csv", method="curl")
dir()
res <- read.csv("restaurant.csv")
head(res, n=3)
tail(res, n=3)
summary(res)
str(res)
?str
str(X)
str(X["var1"])
typeof(X)
quantile(res$councilDistrict, na.rm = TRUE)
quantile(res$councilDistrict, probs=c(0.5, 0.75, 0.9))
quantile(res$councilDistrict, probs=c(0.5, 0.75, 0.9), na.rm = TRUE)
table(res$zipCode, useNA="ifany")
?table
table(res$councilDistrict, res$zipCode)
sum(is.na(res$councilDistrict))
any(is.na(res$councilDistrict))
all(res$zipCode > 0)
colSums(is.na(res))
all(colSums(is.na(res)) == 0)
table(res$zipCode %in% c("21212", "21213"))
table(res$zipCode %in% c("21212"))
res[res$zipCode %in% c("21212"), ]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreak$replicate
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~., data=warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")
?xtabs
DF <- as.data.frame(UCBAdmissions)
DF
head(warpbreaks)
xtabs(Freq ~ Dept + Gender, data=DF)
xtabs(Gender ~ Dept + Admit, data=DF)
xtabs(Freq ~ Dept * Gender, data=DF)
xtabs(Freq ~ Dept - Gender, data=DF)
xtabs(Freq ~ Dept, Gender, data=DF)
xtabs(Freq ~ Dept Gender, data=DF)
xtabs(Freq ~ Dept + Gender, data=DF)
xtabs(Freq ~ c(Dept, Gender), data=DF)
head(esoph)
xtabs(Freq ~ ., data=DF)
xtabs(cbind(ncases, ncontrols) ~ ., data = esoph)
s1 <- seq(1, 10, by=2); s1
s2 <- seq(1, 10, length=3); s2
x <- c(1, 3, 8, 25, 100), seq(along = x)
x <- c(1, 3, 8, 25, 100); seq(along = x)
along = x
rm(along)
res$nearMe = res$neighborhood %in% c("Roland Park", "Homeland")
table(res$nearMe)
res$zipWrong = ifelse(res$zipCode < 0, TRUE, FALSE)
table(res$zipWrong, res$zipCode < 0)
res$zipGroups = cut(res$zipCode, breaks=quantile(res$zipCode))
table(res$zipGroups)
table(res$zipGroups, res$zipCode)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
rest$zipGroups = cut2(res$zipCode, g=4)
res\$zipGroups = cut2(res$zipCode, g=4)
res$zipGroups = cut2(res$zipCode, g=4)
table(res$zipGroups)
res$zcf <- factor(res$zipCode)
res$zcf[1:10]
class(res$zcf)
yesno <- sample(c("yes", "no"), size=10, replace=TRUE)
yesnofac <- factor(yesno, levels=c("yes", "no"))
relevel(yesnofac, ref="yes")
as.numeric(yesnofac)
library(plyr)
res2 = mutate(res, zipGroups=cut(zipCode, g=4))
res2 = mutate(res,zipGroups=cut(zipCode,g=4))
res$zipGroups
res = res[, !zipGroups]
res = res[, !("zipGroups")]
res = res[, !(zipGroups)]
res = subset(res, select = -c("zipGroups"))
res = subset(res, select = - c("zipGroups"))
res = subset(res, select = -zipGroups
)
res2 = mutate(res,zipGroups=cut(zipCode,g=4))
res2 = mutate(res,zipGroups=cut2(zipCode,g=4))
table(res2)
table(res2$zipGroups)
res$zipGroups <- cut2(res$zipCode, g=4)
res2 = mutate(res,zipGroups=cut2(zipCode,g=4))
res$zipGroups
cut(res$zipCode, breaks =  quantile(res$zipCode))
?factor
?relevel
fivefac = sample(c("1", "2", "3", "4", "5"), size=20, replace = TRUE)
fivefac
fivefac = factor(fivefac)
fivefac
relevel(fivefac, ref="3")
?mutate
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtacars, id=c("carname","gear", "cyi"), measure.vars=c("mpg", "hp"))
carMelt <- melt(mtcars, id=c("carname","gear", "cyi"), measure.vars=c("mpg", "hp"))
carMelt <- melt(mtcars, id=c("carname","gear", "cyl"), measure.vars=c("mpg", "hp"))
head(carMelt, n=3)
tail(carMelt, n=-3)
tail(carMelt, n=3)
clear
cylData <- dcast(carMelt, cyl ~ variable)
cylData\
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
?dcast
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
?tapply
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
?lapply
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
ddply(InsectSprays.(spray), summarize, sum=sum(count))
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
?ddply
ddply(InsectSprays,.(spray), summarize, sum=sum(.count))
ddply(InsectSprays,.(spray), summarise, sum=sum(.count))
ddply(InsectSprays,.(spray), summarise, sum=sum(count))
spraySums = ddply(InsectSprays,.(spray), summarise, sum(ave(count, FUN=sum)))
dim(spraySums)
spraySums = ddply(InsectSprays,.(spray), summarise, sum=(ave(count, FUN=sum)))
dim(spraySums)
getwd()
fileUrl = ""
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "getdata-data-ss06hid.csv", method = "curl")
hdata = read.csv("getdata-data-ss06hid.csv")
names(hdata)
head(hdata$ags)
head(hdata$AGS)
str(hdata$AGS)
str(hdata$ACR)
agricultureLogical = hdata$AGS = 6 & hdata$ACR = 3
agricultureLogical = hdata$AGS == 6 & hdata$ACR == 3
head(hdata[which(agricultureLogical)]
)
head(hdata[which(agricultureLogical)])
head(hdata[which(agricultureLogical)],)
head(hdata[which(agricultureLogical), ])
clear
rm(list=ls())
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "getdata-jeff.jpg", method="curl")
jdata = read.jpeg("getdata-jeff.jpg")
library(jpeg)
install.packages("jpeg")
library(jpeg)
jdata = read.jpeg("getdata-jeff.jpg")
jdata = readJPEG("getdata-jeff.jpg")
quantile(jdata, probs = c(0.3, 0.8))
quantile(jdata, probs = c(0.3, 0.8), native=TRUE)
jdata = readJPEG("getdata-jeff.jpg", native=TRUE)
quantile(jdata, probs = c(0.3, 0.8))
rm(list=ls())
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "getdata-data-GDP.csv", method="curl")
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "get-data-EDSTATS_Country.csv", method="curl")
gdata = read.csv("getdata-data-GDP.csv")
edata = read.csv("get-data-EDSTATS_Country.csv")
names(gdata)
names(edata)
head(gdata)
head(gdata)
gdata = read.csv("getdata-data-GDP.csv")
head(gdata)
gdata = read.csv("getdata-data-GDP.csv")
head(gdata)
head(edata)
head(edata, n=3)
mergedData = merge(gdata, edata, by.x="Code", by.y="CountryCode", all=TRUE)
head(mergeData, n=2)
head(mergedData, n=2)
names(mergedData)
mergedSorted = sort(mergedData$Ranking, decreasing = TRUE, na.last = TRUE)
last(mergedSorted)
taik(mergedSorted)
tail(mergedSorted)
?order
mergedSorted = mergedData[order(mergedData$ranking, descending = TRUE, na.last = TRUE),]
mergedSorted = mergedData[order(mergedData$ranking, descending = TRUE), ]
mergedSorted = mergedData[order(mergedData$Ranking, descending = TRUE), ]
mergedSorted = mergedData[order(mergedData$Ranking, descending = TRUE, na.last = TRUE), ]
order(mergedData$Ranking, descending=TRUE, na.last=TRUE)
order(mergedData$Ranking)
tail(gdata)
tail(edata)
order(mergedData$Ranking)
mergedData$Ranking
order(mergedData$Ranking, na.last=TRUE)
order(mergedData$Ranking, na.last=TRUE, descending=TRUE)
order(mergedData$Ranking, na.last=TRUE, decreasing=TRUE)
str(mergedData$Ranking)
mergedSorted = mergedData[order(mergedData$Ranking, decreasing=TRUE, na.last = TRUE), ]
head(mergedSorted, n=2)
mergedSorted[13,]
tail(mergedSorted)
tail(mergedSorted, n=20)
?merge
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "getdata-data-GDP.csv", method="curl")
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "get-data-EDSTATS_Country.csv", method="curl")
gdata = read.csv("getdata-data-GDP.csv")
edata = read.csv("get-data-EDSTATS_Country.csv")
mergedData = merge(gdata, edata, by.x="CountryCode", by.y="CountryCode")
head(gdata)
head(edata,[1:5])
head(edata[,1:5])
?merge
mergedData = merge(edata, gdata, by.x="CountryCode", by.y="CountryCode")
mergedData = merge(edata, gdata)
mergedData = merge(edata, gdata)
mergedData = merge(edata, gdata, by.x="CountryCode", by.y="CountryCode")
mergedSorted = mergedData[order(mergeData$ranking, na.last=TRUE, decreasing=TRUE),]
mergedSorted = mergedData[order(mergedData$ranking, na.last=TRUE, decreasing=TRUE),]
mergedSorted = mergedData[order(mergedData$Ranking, na.last=TRUE, decreasing=TRUE),]
mergedSorted[13]
mergedSorted[13,]
tail(mergedSorted, n=20)
?read.csv
gdata$CountryCode
intersect(gdata$CountryCode, edata$CountryCode)
union(gdata$CountryCode, edata$CountryCode)
names(edata)
head(mergedData)
ddply(mergedData, .(Income.Group), summarise,mean(Ranking))
library(plyr)
ddply(mergedData, .(Income.Group), summarise,mean(Ranking))
?mean
ddply(mergedData, .(Income.Group), summarise,mean(Ranking, na.rm=TRUE))
tapply(mergedData$Ranking, mergedData$Income.Group, mean)
tapply(mergedData$Ranking, mergedData$Income.Group, mean, na.rm=TRUE)
library(Hmisc)
library(plyr)
mergedData2 = mutate(mergedData, RankingGroup = cut2(Ranking, g= 5))
table(mergedData2$RankingGroup, mergedData2$Income.Group)
mergedSorted = mergedData[order(mergedData$Ranking, decreasing=TRUE),]
mergedSorted[13, ]
mergedSorted[-1, ]
234 - 35
228 - 35
mergedSorted[13, "CountryCode"]
mergedSorted[13, 1:5]
mergedSorted[1:13, 1:5]
mergedSorted[13,]
mergedSorted[1:13, 1:5]
mergedSorted[13, 1:5]
mergedSorted[13, 1:2]
getwd()
dir()
data <- read.csv("getdata-data-ss06hid.csv")
names(data)
?strsplit
strsplit(names(data), "wgtp")
gdp <- read.csv("getdata-data-GDP.csv")
colMeans(gdp)
colMeans(gdp$Dollars)
mean(gdp$Dollars)
means(gdp$Dollars)
str(gdp$Dollars)
names(gdp)
?read.csv
View(gdp)
View(gdp)
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"))
gdp$Dollars <- as.numeric
?as.numerioc
?as.numeric
?read.csv
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.string = "..")
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.string = "\\.\\.")
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.strings = "\\.\\.")
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.strings = c("\\.\\.")
)
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.strings = c(".."))
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "numeric"), na.strings = c("\\.\\."))
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "string"), na.strings = c("\\.\\."))
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("string", "numeric", "string", "character"), na.strings = c("\\.\\."))
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("character", "numeric", "character", "numeric"), na.strings = c("\\.\\."))
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("character", "numeric", "character", "character"), na.strings = c("\\.\\."))
head(gdp$Dollars)
gdp$Dollars[!gdp$Dollars == ".."]
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("character", "numeric", "character", "character"), na.strings = c(".."))
gdp$Dollars[!gdp$Dollars == ".."]
gdp <- read.csv("getdata-data-GDP.csv", colClasses = c("character", "numeric", "character", "character"), na.strings = c("..", ""))
gdp$Dollars
gdp$Dollars <- as.numeric(gdp$Dollars)
gdp$Dollars
means(gdp$Dollars, na.rm=TRUE)
mean(gdp$Dollars, na.rm=TRUE)
mean(gdp$Dollars[1:190], na.rm=TRUE)
grep("^United", gdp$Economy)
gdp$Economy
grep("^United", gdp$Economy)
Sys.getlocale
Sys.getlocale()
edu <- read.csv("get-data-EDSTATS_Country.csv")\
edu <- read.csv("get-data-EDSTATS_Country.csv")
edu <- tbl_df(edu)
library(dplyr)
edu <- tbl_df(edu)
edu
?merge
View(gdp)
data <- merge(gdp, edu, by.x="CountryCode", by.y="CountryCode")
data <- tbl_df(data)
data
names(data)
data$Special.Notes
grep("Fiscal year end: June", data$Special.Notes)
length(grep("Fiscal year end: June", data$Special.Notes))
library(quantmod)
installed.packages("quantmod")
library(quantmod)
installed.packages("quantmod")
installed.packages("quantmod")
installed.packages("quantmod")
chooseCRANmirror()
installed.packages("quantmod")
installed.packages("quantmod")
install.packages("quantmod", repos="http://R-Forge.R-project.org", type="source")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign = FALSE)
sampleTimes = index(amzn)
head(amzn)
library(lubridate)
names(amzn)
?xts
amzn["2007"]
amzn_2007 <- amzn["2007"]
dim(amzn_2007)
amzn_2007["Monday"]
amzn_2012 <- amzn["2012"]
dim(amzn_2012)
rm(amzn_2007)
?lubridate
wday("2007-12-26")
mday("2007-12-26")
wday("2007-12-26")
wday("2007-12-21")
wday("2007-12-22")
wday("2007-12-23")
wday("2007-12-23", label = TRUE)
wday(amzn_2012)
wday(amzn_2012, label = TRUE) == "Mon"
dim(amzn_2012[wday(amzn_2012, label = TRUE) == "Mon"])
setwd("../ExData_Plotting1/src/")
source("read_data.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
a = [8, 9, 10, 11, 12]
a = c(8, 9, 10, 11, 12)
mean(a)
summary(a)
var(a)
sqrt(var(a))
var(a)
4 + 1 + 0 + 1 + 4
10/5
sqrt(2)
exit
quit()
